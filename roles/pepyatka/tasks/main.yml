---

- fail: msg="Pepyatka server is only supported for Ubuntu"
  when: ansible_distribution != 'Ubuntu'

- name: Add the myway apt repository
  apt_repository: repo="ppa:dhor/myway" state=present
  tags:
    - graphicsmagick
    - pepyatka

- name: Install GraphicsMagick
  apt: name=graphicsmagick state=present update-cache=yes
  tags:
    - graphicsmagick
    - pepyatka

- name: Create pepyatka user
  user:
    name: "{{ pepyatka_user }}"
    home: "{{ pepyatka_home_dir }}"
    createhome: yes
    system: yes
  tags: pepyatka

- name: Install required packages
  apt: name={{ item }} state=present
  with_items:
    - git
    - make
    - g++
  tags: pepyatka

- name: Check if pepyatka-server repo already exists
  stat: path={{ pepyatka_home_dir }}/pepyatka-server/.git
  register: pepyatka_server_dir
  tags: pepyatka

- name: Initial deploy of pepyatka-server
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  git:
    repo: "{{ pepyatka_server_repo }}"
    dest: "{{ pepyatka_home_dir }}/pepyatka-server"
    version: "{{ pepyatka_server_branch }}"
  register: pepyatka_server_init
  when: not pepyatka_server_dir.stat.exists
  tags: pepyatka

- name: Get pepyatka-server local version
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: chdir={{ pepyatka_home_dir }}/pepyatka-server git rev-parse HEAD
  register: pepyatka_server_local_version
  tags: pepyatka

- name: Fetch pepyatka-server remote
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: chdir={{ pepyatka_home_dir }}/pepyatka-server git fetch origin
  tags: pepyatka

- name: Get pepyatka-server version on remote
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: chdir={{ pepyatka_home_dir }}/pepyatka-server git rev-parse origin/{{ pepyatka_server_branch }}
  register: pepyatka_server_remote_version
  tags: pepyatka

- name: Update pepyatka-server
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  git:
    repo: "{{ pepyatka_server_repo }}"
    update: yes
    dest: "{{ pepyatka_home_dir }}/pepyatka-server"
    version: "{{ pepyatka_server_branch }}"
    force: yes
  register: pepyatka_server
  when: pepyatka_server_local_version.stdout != pepyatka_server_remote_version.stdout
  tags: pepyatka

- name: Remove development and test environments (pepyatka may fail to start for some reason)
  file: path={{ pepyatka_home_dir }}/pepyatka-server/config/environments/{{ item }}.js state=absent
  with_items:
    - development
    - test
  when: pepyatka_node_env != "development" and pepyatka_node_env != "test"
  tags: pepyatka

- name: Deploy pepaytka config
  template:
    src: environment.js.j2
    dest: "{{ pepyatka_home_dir }}/pepyatka-server/config/environments/{{ pepyatka_node_env }}.js"
    owner: "{{ pepyatka_user }}"
    group: "{{ pepyatka_group }}"
  register: pepyatka_config
  tags: pepyatka

- name: Deploy reset password mail template
  template:
    src: resetPassword.ejs.j2
    dest: "{{ pepyatka_home_dir }}/pepyatka-server/app/scripts/views/mailer/resetPassword.ejs"
    owner: "{{ pepyatka_user }}"
    group: "{{ pepyatka_group }}"
  register: pepyatka_config
  tags: pepyatka

- name: Create directories for attachments, thumbnails and profile pictures
  file:
    path: "{{ pepyatka_files_dir }}/{{ item }}"
    state: directory
    owner: "{{ pepyatka_user }}"
  with_items:
    - original
    - thumbnails
    - profilePictures
  tags:
    - pepyatka

- name: Install pepyatka-server dependencies
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  npm: path="{{ pepyatka_home_dir }}/pepyatka-server"
  when: pepyatka_server.changed or pepyatka_server_init.changed or pepyatka_config.changed
  tags: pepyatka

- name: Install pm2
  npm: name=pm2 global=yes state=latest
  tags: pepyatka

- name: Check if pm2 startup has been run already
  stat: path=/etc/init.d/pm2-init.sh
  register: pm2_init
  tags: pepyatka

- name: Init pm2
  command: "pm2 startup ubuntu -u {{ pepyatka_user }}"
  when: not pm2_init.stat.exists
  tags: pepyatka

- name: Get list of pm2 apps running
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: pm2 list
  register: pm2_list_1
  changed_when: false
  tags: pepyatka

- name: Stop pepyatka
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: pm2 {{ item }} pepyatka
  with_items:
    - stop
    - delete
  when: (pm2_list_1.stdout.find('pepyatka') != -1 and (pepyatka_server.changed or pepyatka_server_init.changed or pepyatka_config.changed)) or (pm2_list_1.stdout.find('errored') != -1)
  tags: pepyatka

- name: Get list of pm2 apps running
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: pm2 list
  register: pm2_list_2
  changed_when: false
  tags: pepyatka

- name: Start pepyatka-server
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  environment:
    NODE_ENV: "{{ pepyatka_node_env }}"
  command: chdir="{{ pepyatka_home_dir }}" pm2 start --name pepyatka pepyatka-server/index.js
  when: pm2_list_2.stdout.find('pepyatka') == -1
  tags: pepyatka

- name: Ensure pepyatka is up and running
  wait_for: host=localhost port={{ pepyatka_server_port }} timeout=30 state=started
  tags:
    - nginx

- name: Save pm2 config
  sudo: yes
  sudo_user: "{{ pepyatka_user }}"
  command: pm2 save
  when: pm2_list_2.stdout.find('pepyatka') == -1
  tags: pepyatka

- name: Configure logrotate for pm2 logs
  template:
    src=logrotate.j2
    dest=/etc/logrotate.d/pepyatka-pm2
  tags:
    - pepyatka
    - logrotate
